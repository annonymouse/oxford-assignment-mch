
-- forwardphone.csp
-- Bill Roscoe, June 2012

-- Mobile CSP
-- CSPM coding of the telephone network from Sect 20.3 of
-- Understanding Concurrent Systems that works by forwarding
-- channels round a ring network.

-- Includes a number of corrections to the original file
-- whose need was revealed by the work of extending it.

-- Extended to allow forwarding of calls: "model answer" to Q2 of MCH
-- assignment, 2012.

-- Differences relevant to forwarding are labelled --FORWARD

-- Basic mechanism of FORWARD is this:

{-  

A user can forward their phone by picking it up and, instead of dialling
a number, saying forward.j for a number other than this one.  This
can be reversed in similar circumstances by unforward.  We allow multiple
forward/unforward events within a single "handset up" period, but only
allow one call since putting your phone down is the way of terminating
a call.

We have two choices of how to handle forwarding: either it can be done at the
local exchange or at the phone itself.  The former is probably more
realistic and will make it easier to handle the situation where Alice
receives a call on her forwarded phone when a call is being made from it.

Detecting forwarding cycles in general is not easy because of the dynamic
shape of the graph of forwarding links, and the fact that it is updated
in parallel and in parallel with calls being made.  I think the surest way
of avoiding this is to have a hop-count in making calls, which is decremented
each time a call is forwarded.  That is what is implemented here.  In other
words we allow any set of forwarding links to be created, but have calls
sent round cycles (or along too many non-cycle links) "wear out".

This approach means that we do not need to have more mobile channels, but
rather extend the type of calls that are passing around the network,
and need a new mode of a call failing.

The following limit the number of times we allow a call to be
forwarded: any more will cause failure.
-}

maxhop = 2               -- FORWARD max number of exchanges where message
                         -- can be forwarded.  2 for figures below.
hopcount = {0..maxhop}   -- FORWARD parameter for messages between exchange
                         -- nodes to carry

-- We can define sets of phones and exchanges, and the binding between them:
N=4

Phones = {0..N-1}

M = 3
-- Figures quoted below are N=4 and M=3

Exchanges = {0..M-1}

Exch(n) = {n%M}   -- one exchange per phone: version for figures below
-- Exch(n) = {1,n%M}   -- some multiples as an alternative

-- First for M=3, N=4  gives us three exchanges, one of which has two phones
-- attached.

LPhones(y) = {x | x <- Phones, member(y,Exch(x))}
dom(X) = {a | (a,b) <- X}

maxlocal = N   -- FORWARD at least the max number of phones in an exchange

local(x,y) = member(x,Exch(y))
nonlocal(x,y) = not(member(x,Exch(y)))

-- In this Closed System coding, the mobile channels are permanently
-- attached at one end to their own phone. Sometimes the other end is
-- either in the exchange or at a phone to which a call is in progress.

mcnames = Phones

-- This is the set of messages sent between phones once connection is made:
speech = {0}

-- The coding requires two versions of each channel via which a process
-- might gain or lose a channel 

-- dirs allows processes to add or subtract a channel from its alphabet.
-- In this file a process never exports a channel not in its alphabet, so
-- we do not need the extra dirs Null that a process communicates when it
-- outputs a channel name that is not in its alphabet.  [In this script we
-- often wrote Plus when Null might be more natural.]

datatype dirs = Plus | Minus 
channel mc:mcnames.cmess.dirs
channel mcp:mcnames.cmess

-- These are the values communicated over the mobile channels.

-- Failed here means that the call has failed due to FORWARDing problems.

datatype cmess =  Ring |Confirm | Cancel | Hungup | Pickup.mcnames | Isbusy | Failed | Talk.speech | EndC

-- Thanks to FDR's type system we output and input the labels for channels 
-- (mcnames) rather than the channels themselves.

-- The following function (used for clarity in our coding) represents the
-- channel permanently connected to a phone.

ch(x) = x  -- each phone uses its own label for its channel


-- The events visible/audible to users:

channel lift,  hangup, ringing: Phones
channel cforward: Phones        -- FORWARD
channel forward:Phones.Phones    -- FORWARD
channel say,hear:Phones.speech
channel dial:Phones.Phones

-- Those between phone and exchange (with two versions when they
--                                   carry a channel)

channel call:Phones.Exchanges.Phones.mcnames.dirs
channel callp:Phones.Exchanges.Phones.mcnames
channel called:Phones.Exchanges.mcnames.dirs
channel calledp:Phones.Exchanges.mcnames

channel eforward:Phones.Exchanges.Phones  -- FORWARD
channel ecforward:Phones.Exchanges  -- FORWARD


channel busy:Phones.Exchanges

-- The two versions of the inter-exchange channels

channel ring:Exchanges.Phones.hopcount.mcnames.dirs  -- FORWARD: hopcount
channel ringp:Exchanges.Phones.hopcount.mcnames      -- FORWARD: hopcount

-- Here is a quiescent phone

Phone(x) = lift.x -> LPhone(x)
           [] called!x?e?c!Plus -> Ringing(x,c) -- a call comes in

-- A phone with no active call with handset lifted
-- can make a call, initiate or cease forwarding.
-- Creation or cancellation of forwarding has to be
-- communicated to all local exchanges

LPhone(x) = 
   dial.x?y:diff(Phones,{x}) -> 
              (let cing = call.x?e:Exch(x)!y!ch(x)!Plus -> Waiting(x) 
                       [] busy.x?e -> cing
               within cing)
[] hangup.x -> Phone(x)
[] busy!x?e -> LPhone(x)
[] forward.x?y:diff(Phones,{x}) ->                                -- FORWARD
                  (let fing({}) = LPhone(x)                      -- FORWARD
                       fing(E) = eforward.x?e:E!y ->             -- FORWARD 
                                    fing(diff(E,{e}))            -- FORWARD
                       [] busy.x?e -> fing(E)                     -- FORWARD
               within fing(Exch(x)))                               -- FORWARD
[] cforward.x -> (let cfing({}) = LPhone(x)                      -- FORWARD
                       cfing(E) = ecforward.x?e:E ->             -- FORWARD
                                  cfing(diff(E,{e}))               --FORWARD
                       [] busy.x?e -> cfing(E)                     -- FORWARD
               within cfing(Exch(x)))                               -- FORWARD

-- No other alterations to the phone are necessary for FORWARDing

-- The phone has received a call, with handset down, so is ringing
-- If the exchange tries to open another call, it replies it is busy.
-- The incoming call can be cancelled via Cancel on the imported channel.

Ringing(x,c) = 
   ringing.x -> Ringing(x,c)
[] lift.x -> mc.c.Pickup!ch(x).Plus -> 
      (mc.ch(x).Confirm!Plus -> Incall(x,c)
      [] mc.ch(x).Hungup!Plus -> mc.c.Cancel.Minus -> CallOver(x))
[] busy!x?e -> Ringing(x,c)
[] mc.c.Cancel.Minus -> Phone(x)

-- This is the state where the caller is waiting for connection:

Waiting(x) = 
   hangup.x -> GetBack(x) 
[] mc.ch(x).Pickup?c'!Plus -> mc.c'.Confirm!Plus -> Incall(x,c')
[] mc.ch(x).Isbusy!Plus -> CallOver(x)    -- "busy" or "engaged"
[] mc.ch(x).Failed!Plus -> CallOver(x)    -- Call failed because FORWARDing gone wrong
[] busy!x?e -> Waiting(x)

-- If we have started a call and then hang up, we need to recover the
-- the other end of our channel

GetBack(x) = 
   mc.ch(x).Pickup?c!Plus -> mc.c.Hungup!Minus -> 
                      mc.ch(x).Cancel!Plus -> Phone(x)
[] mc.ch(x).Cancel!Plus -> Phone(x)
[] mc.ch(x).Failed!Plus -> Phone(x)   -- FORWARD
[] busy!x?e -> GetBack(x)

-- While the call is open the following pair of
-- states apply.  There are two states to avoid deadlock when both users
-- talk at once!

Incall(x,c) =  
   say.x?m -> Incall'(x,c,m) 
[] mc.ch(x).Talk?m!Plus -> hear.x.m -> Incall(x,c)
[] hangup.x -> 
       (mc.c.EndC!Minus -> mc.ch(x).EndC!Plus -> Phone(x)
        [] mc.ch(x).EndC!Plus -> mc.c.EndC!Minus -> Phone(x))
[] mc.ch(x).EndC!Plus -> mc.c.EndC!Minus -> CallOver(x)
[] busy!x?e -> Incall(x,c)

Incall'(x,c,m) =  
   mc.c.Talk.m.Plus  -> Incall(x,c)
[] mc.ch(x).Talk?m'!Plus -> hear.x.m' -> Incall'(x,c,m)
[] hangup.x -> 
       (mc.c.EndC!Minus -> mc.ch(x).EndC!Plus -> Phone(x)
        [] mc.ch(x).EndC!Plus -> mc.c.EndC!Minus -> Phone(x))
[] mc.ch(x).EndC!Plus -> mc.c.EndC!Minus -> CallOver(x)
[] busy!x?e -> Incall'(x,c,m)

-- The following state applies after a call or busy reply.  It
-- is just waiting for the user to hang up.

CallOver(x) = hangup.x -> Phone(x)
           [] busy.x?e -> CallOver(x)


-- As explained in the book, we can use any deadlock-free routing algorithm
-- for our exchanges: here we use the Non-blocking ring from Chapter 4.

-- A node can have 0,1 or 2 messages in.  (A message is the combination of
-- a channel and the number of the callee's phone.)

-- In addition to the ring and local communications, these nodes
-- also make use of the communicated channels for call cancellation and
-- sending back Isbusy to the calling phone when appropriate.

-- It is the exchange nodes that actually manage the FORWARDing,
-- and have an extra parameter F that is a set of pairs (p,p') where
-- p is a local phone and p' != p is the one it is forwarded to (if any).
-- Parameter F is initially {}

NBX0(n,F) = ring.n?y?h?c!Plus -> NBX1(n,(y,c,h),F)
          [] call?x:LPhones(n)!n?y?c!Plus -> NBX1(n,(y,c,maxhop),F)
          [] eforward?xx:LPhones(n)!n?yy:diff(Phones,{xx}) -> NBX0(n,plusf(xx,yy,F))
          [] ecforward?xx:LPhones(n)!n -> NBX0(n,cancf(xx,F))

cancf(x,F) = {(a,b) | (a,b) <- F, a!=x}

plusf(x,y,F) = union(cancf(x,F),{(x,y)})

datatype fwdres = Cycle | Succ.Phones

-- Of course a forwarding destination might be in the remit of
-- this exchange node, so we might need several hops here.
-- We have to put a limit on this, but as long as the tolerance
-- is at least as large as this node's phone set, it can't
-- create a problem other than a genuine cycle error.

fwdc(x,F,n) = if n==0 then Cycle
              else
              if not(member(x,dom(F))) then Succ.x
              else
              fwdc(apply(F,x),F,n-1)

fwd(x,F) = fwdc(x,F,maxlocal)

fwd'(x,F) = let Succ.y = fwd(x,F) within y
              
apply(F,x) = let {y} = {y' | (x',y') <- F, x'==x}
             within y

{-
Forwarding is restricted to only occuring after busy events have been emitted by
the source, so forwarding resolution can only occur after this.  In the case
where a busy signal may have been sent previously, this script now uses the
NBX1a and NBX2a processes to either send a busy if no forwarding exists, or to
forward the call and return to the process NBX1 or NBX2 respectively in order to
check whether the forwarding works.  This can be repeated until the ttl of the
forwarding expires or until a call is made.  No changes are neccesary to the
mobile-CSP portion of the code as a result.

If both forms of forwarding are in use at the same time the interaction would be
odd.  Forwarded calls would always win over busy forwarding - as they would be
applied "first".  However in the case where a busy signal where forwarding rules
were changed mid call, so 
    call (which has been forwarded)  -> forward -> eforward -> busy -> ...
the busied call would check the forwarding status again.  This is due to the
fact that in effect, call forwarding is applied twice, once at call time
generally, and once when a busy signal is heard.

The FDR3 debugger was relatively straight forward to use here, as the majority
of the elements of mobile-CSP syntax were hidden.  The only issue is in the dual
naming of channels for when mobile eventt subscription should occur meant that
you need to be aware of what is going on.  Would more renaming help here?  I
thinks this would probably interfere with the internal workings as things were
renamed to each other.

-}

-- Here is where FORWARDing happens:
NBX1a(n,(y,c,h),F) = if (member(y,dom(F)) and h <= 0) or fwd(y,F) == Cycle  
                     then
                     mc.c!Failed!Minus -> NBX0(n,F)
                     else if not(member(y,dom(F))) then
                         mc.c!Isbusy!Minus -> NBX0(n,F) [] mc.c!Cancel!Minus -> NBX0(n,F)
                     else NBX1(n,(fwd'(y,F),c,h-1),F)

NBX2a(n,(y,c,h),next,F) = if (member(y,dom(F)) and h <= 0) or fwd(y,F) == Cycle  
                     then
                     mc.c!Failed!Minus -> NBX1(n,next,F)
                     else if not(member(y,dom(F))) then 
                         mc.c!Isbusy!Minus -> NBX1(n, next, F) [] mc.c!Cancel!Minus -> NBX1(n,next,F)
                     else NBX2(n,(fwd'(y,F),c,h-1),next,F)


NBX1(n,(y,c,h),F) = 
      ring.n?y'?h'?c'!Plus -> NBX2(n,(y,c,h),(y',c',h'),F)
   [] local(n,y) & (called.y.n.c!Minus -> NBX0(n,F))
                    [] busy.y.n -> NBX1a(n, (y,c,h), F)
   [] nonlocal(n,y) & ring.(n+1)%M!y!h!c!Minus -> NBX0(n,F)
   [] mc.c.Cancel!Minus -> NBX0(n,F) 
   [] eforward?xx:LPhones(n)!n?yy:diff(Phones,{xx}) -> NBX1(n,(y,c,h),plusf(xx,yy,F))
   [] ecforward?xx:LPhones(n)!n -> NBX1(n,(y,c,h),cancf(xx,F))

NBX2(n,(y,c,h),(y',c',h'),F) = 
    local(n,y) & (called.y.n.c!Minus -> NBX1(n,(y',c',h'),F))
                  [] busy.y.n -> NBX2a(n, (y,c,h),(y',c',h'), F)
   [] nonlocal(n,y) & ring.(n+1)%M!y!h!c!Minus -> NBX1(n,(y',c',h'),F)
   [] mc.c.Cancel!Minus -> NBX1(n,(y',c',h'),F) 
   [] mc.c'.Cancel!Minus -> NBX1(n,(y,c,h),F) 
   [] eforward?xx:LPhones(n)!n?yy:diff(Phones,{xx}) -> NBX2(n,(y,c,h),(y',c',h'),plusf(xx,yy,F))
   [] ecforward?xx:LPhones(n)!n -> NBX2(n,(y,c,h),(y',c',h'),cancf(xx,F))


-- Here are the natural INITIAL alphabets of the phones and exchange nodes.

AP(n) = {|busy.n, mc.n, call.n, called.n, ringing.n, dial.n, 
          lift.n, hangup.n, say.n,hear.n, forward.n, eforward.n, 
          cforward.n,ecforward.n|} 
AX(n) = {|ring.n, ring.((n+1)%M), call.y.n,called.y.n, busy.y.n, 
          eforward.y.n, ecforward.y.n | y <- Phones|}

--%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- Now we look at the plumbing of our mobile model
-- The following are respectively the sets of communicable channels/ports...
VSigma = {| mc |}
-- ... and of the undirected or primed version....
VSigmap = {| mcp |}
-- ... and of that part of the unprimed alphabet that does not move 
CSigma = {|ring,say,hear,call,called,lift,hangup,dial,busy,ringing,
           forward,eforward,cforward,ecforward|}

-- In the coding of the individual constituent processes, all actions
-- that can potentially alter a process's alphabet (namely all over a
-- channel mc.c or another port-carrying channel are labelled with a
-- member of dirs.  These labels are not synchronised between main processes,
-- but are for the guidance of the parallel operator. 

-- The following function computes those primed event associated with a
-- given set of unprimed ones (does not include events that cannot
-- communicate a port).

prime(A) = Union({{|mcp.n.x | mc.n.x.d <- A|},
                  {|callp.x.y.c | call.x.y.c.d <- A|},
                  {|calledp.x.y.c | called.x.y.c.d <- A|},
                  {|ringp.x.y.h.c | ring.x.y.h.c.d <- A|}
                })

-- Each of the above events can modify a component's alphabet by one
-- port.  These modifications are calculated:

modify(x,A) = let port(call._._._.c.D) = ({|mc.c|},D)
                  port(called._._.c.D) = ({|mc.c|},D)
                  port(ring._._._.c.D) = ({|mc.c|},D)
                  port(mc.c.Pickup.c'.D) = ({|mc.c'|},D)
                  port(mc.c._.D) = ({|mc.c|},D)
                  port(x) = ({},Plus)
                  (pt,dt) = port(x)
                  within 
                  if dt == Plus then union(A,pt)
                  else diff(A,pt)

-- Each main process is run in parallel with a regulator, which is
-- part of our implementation of the mobile parallel operator.

-- The regulator keeps track of its process's alphabet, and allows all
-- communicated channels in their primed forms that are not it that alphabet.
-- Everything that is in the alphabet must be synchronised with the
-- corresponding process.

AReg = union(VSigma,CSigma)

Reg(A) = ([] x:diff(VSigmap,prime(A)) @ x -> Reg(A))
         [] ([] x:A @ x -> Reg(modify(x,A)))

-- So the following process combines Reg and P, as a component for the
-- whole network

MLift(P,A) = (P[|AReg|]Reg(A))[[x <- flatten(x) | x <- union(A,VSigma)]]

-- flatten removes the dirs field of any process that has one: these fields
-- are not synchronised.

flatten(call.x.y.z.c.D) = callp.x.y.z.c
flatten(called.x.y.c.D) = calledp.x.y.c
flatten(mc.c.x.D) = mcp.c.x
flatten(ring.n.c.h.x.D) = ringp.n.c.h.x
flatten(x) = x

-- In this model we have only made processes agree to the MOBILE ports
-- they do not have.  We therefore have all processes agree on these
-- and have ordinary alphabets for the rest of their events.

UAP(n) = union(VSigmap,{flatten(x) | x <- AP(n)})
UAX(n) = union(VSigmap,{flatten(x) | x <- AX(n)})

ParPhones = || i:Phones @ [UAP(i)] MLift(Phone(i),AP(i))
ParExchanges = ((|| i:Exchanges @ [UAX(i)] MLift(NBX0(i,{}),AX(i)))\{|ringp|})

Iface = {|eforward,ecforward,mcp, callp, calledp, busy |} -- FORWARD

Network = (ParPhones [|Iface |] ParExchanges)
NetworkH = (ParPhones [|Iface |] ParExchanges)\Iface

-- Note there is no hiding at all in the above.

-- The following specifications allow you to see some of this
-- network's behaviour

-- The following should fail when all phones are at the end of a dead call.

assert NetworkH[|{|hangup|}|]STOP :[deadlock-free[F]]


AU(i) = {|forward.i,cforward.i, dial.i, lift.i, hangup.i|}
AUs = {|forward,cforward, dial, lift, hangup|}

RegUs = |~| i:Phones @ [] x:AU(i) @ x -> RegUs

transparent normal

LiveTest = NetworkH[|AUs|]normal(RegUs)


-- This should succeed as no user should be deadlocked by the system
-- and is a much stronger check than simple deadlock freedom.
-- Figures here refer to the particular parameters set out above.

assert LiveTest :[deadlock-free[F]] -- Very large: 1.4G states!

assert NetworkH :[divergence-free] -- Too big to complete

assert NetworkH[|{|dial.0,dial.1|}|]STOP :[divergence-free] 
                     -- Restricted analogue

-- The rest of these assertions are there just to find us illustrative
-- traces.

hungup = {|mcp.n.Hungup | n <- mcnames |}
endc = {|mcp.n.EndC | n <- mcnames |}
failed = {|mcp.n.Failed | n <- mcnames |}

-- Shows that calls can be over-forwarded:

assert NEVS(2) [T= (Network[|{|dial.1,dial.2,dial.3|}|]STOP)\diff(Events,failed)

-- Shows that calls can be successfully forwarded:
-- This is enough to show that this can only happen when busy, as the shortest
-- trace would not include "busy" from 1.1

assert NEVS(2) [T= (Network[|{|dial.0.2,dial.1,dial.2,dial.3|}|]STOP)\diff(Events,{ringing.2})

-- The following specifies that a process can do no more than n visible
-- events: for the checks above,

channel dummy 

NEVS'(0) = STOP 
NEVS'(n) = dummy -> NEVS(n-1)

NEVS(n) = NEVS'(n)[[dummy <- x | x <- Events]]

